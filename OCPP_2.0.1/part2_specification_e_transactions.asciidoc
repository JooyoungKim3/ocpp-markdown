= E. Transactions

== Introduction

This Functional Block describes the OCPP Transaction related functionalities. Transactions are started/stopped on the Charging
Station. Note that at most one transaction can be active on an EVSE at any point in time.

[[flexible_transaction_start_stop]]
=== Flexible transaction start/stop

To support as many business cases as possible, and to prevent sending too many messages when not needed for certain business
cases, OCPP 2.0.1 supports flexible configuration of the start and stop of a transaction.

For this the following Configuration Variables are defined:

- TxStartPoint
- TxStopPoint

These 2 Configuration Variables make it possible to define when a transaction should start: TransactionEventRequest (eventType =
Started) and when a transaction should stop: TransactionEventRequest (eventType  Ended)

With the introduction in OCPP 2.0.1 of flexible start/stop points of a transaction, it is important to provide a definition of a
transaction.


A transaction is the portion of a charging session that is recorded by CSMS. It is a single time frame with a start and stop
time. This information can be used by the operator for billing.

It is up to the Charging Station Operator to define the values for TxStartPoint and TxStopPoint (unless these are preset as read-only
values in the charging station), but not all combinations make sense.

The following three variants are most common:

- If connection time is billed, then start and stop points should be EVConnected.
- If time of use is billed, then the start points should be EVConnected, Authorized and the stop point EVConnected.
    (Such that upon authorization first, the charger is already seen as 'in use').
- If charging time is billed, then start and stop points should be PowerPathClosed. (This starts as soon as charger is ready
    to provide power and stops when authorization is revoked or vehicle disconnected.) Pauses in between (i.e.
    SuspendedEV(SE)) do not end the transaction. Billing on the amount of energy or power can be done based on the meter
    values that are collected during the transaction.

 WARNING


Certain combinations of start and stop points can lead to a situation where a started transaction is never
stopped. For example: when the start point is ParkingBayOccupancy and the stop point is EVConnected,
then a transaction starts when an EV occupies the parking bay, but when the user never connects the EV, but
simply drives away, then the transaction will remain open, because ParkingBayOccupancy is not
configured as a stop point.

**1.1.1. Readonly or Read/Write**

OCPP 2.0.1 supports 2 options for the transaction start/stop Configuration Variables. They can either be: RW (read-write) or R
(read-only).

When a Charging Station supports RW, the CSO can configure the settings. To support all possible settings, the software in the
Charging Station has to be more flexible.

With only R, the settings are fixed in firmware, the CSO can read the settings to learn how a Charging Station will behave, but cannot
configure it. This makes for a simpler implementation. When the needs of the target market are well known there might be no need
to implement the flexible model.

**1.1.2. OCPP 1.6 Transaction compatibility**

If transactions similar to OCPP 1.6 are wanted, this section describes how the transaction start and stop point should be
configured.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


In OCPP 1.x the moment a Charging Station should send StartTransaction.req was not defined very precise, generally this was done
when the Charging Station was ready to deliver energy: cable is connected and user is authorized.

To support similar transaction start behaviour, the value: _PowerPathClosed_ is to be used. (and for completeness, also add:
_EnergyTransfer_

_Table 95. The settings for an OCPP 1.6 compatible transaction_


Configuration Variable Values

TxStartPoint (^) PowerPathClosed
TxStopPoint (^) EVConnected, Authorized
For stop behavior the _ParkingBayOccupancy_ should not be added, OCPP 1.6 did not support this, and in case of a dual socket
charging station where somebody is using the 'opposite' connector, the transaction would then be stopped, while the EV could still
be charging.

==== 1.2. TransactionId generation

New in OCPP 2.0.1: Transaction IDs are now generated by the Charging Station.

In OCPP 1.x this was done by the CSMS. This had some drawbacks. When a Charging Station was offline it had a transaction which
did not have a transactionId.

The TransactionId generated by a Charging Station has to be unique for this Charging Station. During the lifetime of a Charging
Station it should never use the same TransactionId twice. Also when the Charging Station is rebooted, power cycled, firmware
updated, repaired etc.

OCPP does not specify an algorithm to use, but it is RECOMMENDED to use UUIDs.

[[delivering_transaction_related_messages]]
=== Delivering transaction-related messages

The primary purpose of TransactionEventRequest messages is to give the CSMS the information that it will later use to bill the
transaction. To be sure that the CSMS receives all the necessary information for billing a transaction, OCPP uses two mechanisms:
_retrying_ and _sequence numbers_.

**1.3.1. Retrying**

The Charging Station sends TransactionEventRequest messages to the CSMS System as soon as possible after the events they
report on have occurred.

If the Charging Station is offline, or if an error occurs processing the message in transport, the CSMS will be missing billing
information. In order to repair the missing information in the CSMS, the Charging Station should retry to deliver this information.
When the Charging Station fails to receive a TransactionEventResponse for a TransactionEventRequest message within the
message timeout period, the Charging Station should follow the retry procedure described in use case E13 - Transaction-related
message not accepted by CSMS.

**1.3.2. Sequence numbers**

When delivery of TransactionEventRequest messages fails and will be retried later, the result is that TransactionEventRequest
messages may arrive in the CSMS in a different order from the one in which the transaction events occurred at the Charging
Station. This in turn would make it difficult for the CSMS to know if it received all TransactionEventRequest messages about a
transaction, which the CSMS may want to know before it starts billing the transaction.

In order to make it possible to know that all TransactionEventRequest messages about a transaction were received, OCPP uses
_sequence numbers_ in TransactionEventRequest messages. For every EVSE, the Charging Station maintains a counter of the number
of TransactionEventRequest messages generated about that EVSE. When generating a new TransactionEventRequest message,
the Charging Station includes the current value of the EVSEâ€™s counter in the **seqNo** field of the request, and then increments the
counter. With this mechanism, a CSMS can check if it has full information about a transaction by checking that:

- It received a TransactionEventRequest about the start of the transaction, with a **seqNo** _a_
- It received a TransactionEventRequest about the stop of the transaction, with a **seqNo** _o_ greater than _a_.
- It received a TransactionEventRequest about the transaction with **seqNo** _n_ for every integer _n_ between _a_ and _o_

Edition 3 FINAL, 2024-05-06 **E. Transactions**


**1.3.2.1. Sequence number generation**

_This section is normative_.

When a transaction starts, the Charging Station SHOULD set the _seqNo_ field for the TransactionEventRequest message to 0.
(Implementations with a continuously increasing _seqNo_ are still allowed.)

After each TransactionEventRequest Charging Station SHALL increase the _seqNo_ by 1.

==== 1.4. Authorization

To simplify the use cases in this functional block, the way an EV Driver is authorized is not part of these use cases. It will simply be
called something like: "User authorization successful" or "The EV Driver is authorized by the Charging Station and/or CSMS.". This
may be any way of authorizing an EV Driver. See functional block: C Authorization for all the options and requirements for
authorization.

==== 1.5. Clarification for optional fields in TransactionEventRequest

_This section is informative._

The TransactionEventRequest contains several optional fields. Some of these fields should only be sent once and should not be
repeated in every TransactionEventRequest. The following summary points to the requirements related to these optional fields.

**_evse_**


(E01.FR.16) The field evse is only provided in the first TransactionEventRequest that occurs after the EV has connected. It is
not repeated in all future TransactionEventRequests.

**_idToken_**


(E03.FR.01) The field idToken is provided once in the first TransactionEventRequest that occurs after the transaction has
been authorized.
(E07.FR.02) The field idToken is provided once in the TransactionEventRequest that occurs when the authorization of the
transaction has been ended.
(C12.FR.02) The above is also the case when authorization was granted because the idToken is present in the authorization
cache with a Accepted status.
(F02.FR.05): The above is also the case when the idToken is provided by a RequestStartTransactionRequest.

**_reservationId_**


(E03.FR.03/H01.FR.15) The field reservationId is only provided in the first TransactionEventRequest that occurs when the
transaction has been authorized by the idToken for which a reservation existed in the charging station.
(F02.FR.06) The above is also the case when the idToken is provided by a RequestStartTransactionRequest.

**_meterValue_**


(E02.FR.09) The TransactionEventRequest( eventType =Started) must contain the meter values that have been configured
in SampledDataCtrlr.TxStartedMeasurands.
(E02.FR.10) A TransactionEventRequest( eventType =Updated) must be sent at every interval configured in
SampledDataCtrlr.TxUpdatedInterval and contain the meter values that have been configured in
SampledDataCtrlr.TxUpdatedMeasurands. If TxUpdatedMeasurands == 0, then no meter values are sent.
(E06.FR.11) The TransactionEventRequest( eventType =Ended) must contain the meter values that have been configured in
SampledDataCtrlr.TxEndedMeasurands. If SampledDataCtrlr.TxEndedInterval == 0, then only the values taken at start and
end of the transaction are included.

**_transactionInfo.chargingState_**


(E02.FR.13) Whenever the charging state changes, the Charging Station must send a TransactionEventRequest containing
chargingState. This implies that a TransactionEventRequest( eventType  Started) always has a chargingState , because
the state goes from non-existent to a value.
If the change of charging state is the only event, then TransactionEventRequest has a triggerReason =
ChargingStateChanged, but if a change in charging state occurs together with other events, such as those represented
by triggerReason CablePluggedIn or (Stop)Authorized, for example, then chargingState can simply be reported as
part of that message.
A TransactionEventRequest with triggerReason  ChargingStateChanged must contain chargingState.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


**_transactionInfo.stoppedReason_**


(C15.FR.04, E05.FR.10, E05.FR.08/09, E07.FR.06) The stoppedReason must be provided in the
TransactionEventRequest( eventType =Ended), unless the value is Local, in which case it may be omitted.
(F03.FR.03, F03.FR.10, F04.FR.03) The above also applies to transactions that are stopped by a
RequestStopTransactionRequest, however in this case the stoppedReason value must be Remote.

**_transactionInfo.remoteStartId_**


(C05.FR.03, F01.FR.25, F02.FR.01) The remoteStartId must be sent in the next TransactionEventRequest after the
RequestStartTransactionRequest with the same remoteStartId.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


=== 2. Use cases & Requirements

==== 2.1. OCPP transaction mechanism

==== E01 - Start Transaction options.

_Table 96. E01 - Start Transaction_


No. Type Description
1 Name Start Transaction options
2 ID E01
Functional block E. Transactions
3 Objective(s) To inform the CSMS that a transaction at the Charging Station has started.
4 Description This use case describes the different moments a Charging Station can start a transaction (send
TransactionEventRequest with eventType  Started), depending on the configuration of the
Charging Station.
5 Actors Charging Station, CSMS, EV Driver

S1 _Scenario objective_ (^) **To start a transaction when a parking bay occupancy detector detects an "EV".**
_Scenario description_ **1.** The EV Driver parks his "EV" at a Charging Station with a parking bay occupancy detector,
which triggers the detector.

**2.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started (even when the driver is not yet known.
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) No transaction is ongoing on the EVSE.
Configuration Variable: TxStartPoint contains: ParkingBayOccupancy
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
EV Driver
Charging Station CSMS
EV parked.
Parking bay
detector triggers
TransactionEventRequest(eventType  Started,
triggerReason  EVDetected)
TransactionEventResponse()
_Figure 39. Sequence Diagram: Start Transaction options - ParkingBayOccupancy_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



S2 Scenario objective To start a transaction when communication is set up between the Charging Station and an EV
(for example: cable plugged in correctly on both sides)

_Scenario description_ (^) **1.** The Charging Station sets up a connection with the EV.

**2.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started (even when the driver is not yet known).
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) No transaction is ongoing on the EVSE.
Configuration Variable: TxStartPoint contains: EVConnected (Not: ParkingBayOccupancy)
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
EV Driver
Charging Station CSMS
charging cable plugged in
TransactionEventRequest(eventType  Started, chargingState  EVConnected,
triggerReason  CablePluggedIn)
TransactionEventResponse()
_Figure 40. Sequence Diagram: Start Transaction options - EVConnected_
**S3** _Scenario objective_ **To start a transaction when the EV Driver is authorised to charge.**
_Scenario description_ (^) **1.** The EV Driver provides his identification

**2.** The Charging Station validates the provided identification (for example via the Authorization
Cache or an AuthorizeRequest).
**3.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started.
**4.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) No transaction is ongoing on the EVSE.
Configuration Variable: TxStartPoint contains: Authorized (Not: ParkingBayOccupancy).
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


EV Driver

Charging Station CSMS

provides identification

User authorization successful,


TransactionEventRequest(eventType  Started,
triggerReason  Authorized)

TransactionEventResponse()

_Figure 41. Sequence Diagram: Start Transaction options - Authorized_


S4 Scenario objective To start a transaction when the meter has provided the first signed meter values before starting
with charging.

_Scenario description_ (^) **1.** The EV Driver plugs in the cable at the Charging Station and the EV.

**2.** The Charging Station request the Meter for a signed value.
**3**. The Meter provides a signed value (this might take some time).
**4.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started.
**5.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) No transaction is ongoing on the EVSE.
Configuration Variable: TxStartPoint contains: DataSigned (Not: ParkingBayOccupancy,
EVConnected or Authorized).
The Charging Station has a meter that can sign measured values
Configuration Variable: SampledDataSignReadings set to _true_.
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


EV Driver

Charging Station CSMS

EV Connected.

User authorization successful.


get signed meter value
(might take some time)


TransactionEventRequest(eventType  Started,
triggerReason  SignedDataReceived)

TransactionEventResponse()

_Figure 42. Sequence Diagram: Start Transaction options - DataSigned_


S5 Scenario objective To start a transaction when all preconditions have been met to start charging (authorized and
connected), but energy does not yet have to be transfered.

_Scenario description_ (^) **1.** The EV Driver is authorized by the Charging Station and/or CSMS.

**2.** The Charging Station is connected to the EV.
**3.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started.
**4.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) No transaction is ongoing on the EVSE.
Configuration Variable: TxStartPoint contains: PowerPathClosed (Not: ParkingBayOccupancy,
EVConnected, Authorized or DataSigned).
Charging Cable plugged in.
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


EV Connected.


User authorization successful.


TransactionEventRequest(eventType  Started, chargingState  Charging,
triggerReason  ChargingStateChanged)


TransactionEventResponse()

_Figure 43. Sequence Diagram: Start Transaction options - PowerPathClosed_


S6 Scenario objective To start a transaction when the energy flow starts.

_Scenario description_ (^) **1.** The EV Driver is authorized by the Charging Station and/or CSMS.

**2.** The Charging Station closes the power relay.
**3.** The EV starts charging, energy flow starts.
**4.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started.
**5.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.
**Prerequisite(s)** Configuration Variable: TxStartPoint contains: EnergyTransfer (Not: ParkingBayOccupancy,
EVConnected, Authorized, DataSigned or PowerPathClosed).

**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing, _or_
The CSMS is _not_ informed.
EV
Charging Station CSMS
EV Connected.
User authorization successful.
close power relay
energy transfer
TransactionEventRequest(eventType  Started, chargingState  Charging,
triggerReason  ChargingStateChanged)
TransactionEventResponse()
_Figure 44. Sequence Diagram: Start Transaction options - EnergyTransfer_
**7 Error handling** n/a
**8 Remark(s)** n/a
Edition 3 FINAL, 2024-05-06 **E. Transactions**


**E01 - Start Transaction options - Requirements**

_Table 97. E01 - Requirements_


ID Precondition Requirement definition
E01.FR.01 TxStartPoint contains:
ParkingBayOccupancy
AND
Parking Bay Detector detects an "EV"
AND
No transaction has started yet


The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.

E01.FR.02 (^) TxStartPoint contains: EVConnected
AND
The Charging Station has a connection
with the EV
AND
No transaction has started yet on this
EVSE
The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.
E01.FR.03 (^) TxStartPoint contains: Authorized
AND
The EV Driver is authorized
AND
No transaction has started yet
The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.
E01.FR.04 (^) TxStartPoint contains: DataSigned
AND
The Charging Station has a meter that can
sign measured values
AND
Configuration Variable:
SampledDataSignReadings set to _true_.
AND
The Charging Station has retrieved a
signed meter value
AND
No transaction has started yet
The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.
E01.FR.05 TxStartPoint contains:
PowerPathClosed
AND
The EV Driver is authorized AND
The Charging Station has connection with
the EV
AND
No transaction has started yet on this
EVSE
The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.
E01.FR.06 (^) TxStartPoint contains: EnergyTransfer
AND
Energy flow starts
AND
No transaction has started yet on this
EVSE
The Charging Station SHALL start a transaction and send a
TransactionEventRequest (eventType  Started) to the CSMS.
E01.FR.07 When a TransactionEventRequest has to
be created
The Charging Station SHALL set the messageâ€™s **seqNo** field as specified in
Sequence Number Generation.
E01.FR.08 The transactionId generated by the Charging Station MUST be unique for
each transaction started by that Charging Station, even when the Charging
Station is rebooted, repaired, firmware is updated etc, it SHALL ensure that
it never generates the same TransactionId twice.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition
E01.FR.09 When configured to send meter data in the
TransactionEventRequest (eventType =
Started), See: Meter Values - Configuration
AND
EVSE is known at start of transaction


The Charging Station SHALL add the configured measurands to the
optional meterValue field with context  Transaction.Begin in the
TransactionEventRequest(eventType  Started) sent to the CSMS to provide
more details during the transaction.


E01.FR.10 After the EV Driver is authorized for this
transaction


The Charging Station SHALL send a TransactionEventRequest that contains
IdTokenType information.
E01.FR.11 E01.FR.10 The CSMS SHALL verify the validity of the identifier in
TransactionEventRequest.
E01.FR.12 E01.FR.11 The CSMS SHALL send a TransactionEventResponse that includes in
idTokenInfo an authorization status value and the groupIdToken if one
exists for the idToken.
E01.FR.13 This transaction ends a reservation The next TransactionEventRequest SHALL contain the reservationId.
E01.FR.14 After TransactionEventRequest(eventType
 Started) has been sent for a specific
EVSE and Connector


The Charging Station SHALL NOT start another transaction on a different
Connector of the same EVSE until this transaction has ended.


E01.FR.15 When sending a TransactionEventRequest The Charging Station SHALL set the triggerReason to inform the CSMS
about what triggered the event. What reason to use is described in the
description of TriggerReasonEnumType.
E01.FR.16 After the EV is connected with the
Charging Station.


The next TransactionEventRequest SHALL contain evse.id AND
evse.connectorId.
E01.FR.17 When configured to send meter data in the
TransactionEventRequest (eventType =
Started), See: Meter Values - Configuration
AND
EVSE is not known at start of transaction


The Charging Station SHALL add the measurands for eventType  Started
to the optional meterValue field with context  Transaction.Begin in the
TransactionEventRequest(eventType  Updated) that occurs when charging
starts.


E01.FR.18 If the charging state changes The Charging Station SHALL send a TransactionEventRequest including the
chargingState element.
E01.FR.19 When EV temporarily suspends the energy
transfer


The Charging Station SHOULD send a TransactionEventRequest with
chargingState  SuspendedEV
E01.FR.20 E01.FR.19 AND
The Charging Station is not able to handle
temporary suspension of energy transfer


The Charging Station SHOULD send a TransactionEventRequest with
chargingState  EVConnected.

==== E02 - Start Transaction - Cable Plugin First

_Table 98. E02 - Start Transaction - Cable Plugin First_


No. Type Description
1 Name Start Transaction - Cable Plugin First
2 ID E02
Functional block E. Transactions
3 Objective(s) To inform the CSMS that a transaction at the Charging Station has started.
4 Description The EV Driver begins the interaction with the Charging Station by plugging in the charging cable
first. The CSMS is notified about this. Then, when the communication between EV and EVSE is
established, the transaction is started and the CSMS is notified of this. The EV starts charging.
Actors Charging Station, CSMS, EV Driver

Edition 3 FINAL, 2024-05-06 **E. Transactions**



No. Type Description

_Scenario description_ (^) **1.** The EV Driver plugs in the cable at the Charging Station.

**2.** The Charging Station sends a StatusNotificationRequest to the CSMS to inform it about a
Connector that became _Occupied_.
**3.** The Charging Station sends a TransactionEventRequest (eventType  Started) notifying the
CSMS about a transaction that has started (even when the driver is not yet known.)
**4.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.
**5.** The EV Driver is authorized by the Charging Station and/or CSMS.
**6.** The energy offer starts.
**7.** The Charging Station sends a TransactionEventRequest (eventType  Updated) with the
authorized idToken information to the CSMS to inform about the charging status and which
idToken belongs to the transaction.
**8.** The CSMS responds with a TransactionEventResponse to the Charging Station with the
IdTokenInfo.status _Accepted_.
**9.** During the charging process, the Charging Stations continues to send
TransactionEventRequest (Updated) messages for transaction-related notifications.

_Alternative scenario(s)_ (^) E02 - Start Transaction - IdToken First
E04 - Offline Start Transaction
E05 - Start Transaction - Id not Accepted
**5 Prerequisite(s)** The Charging Cable is plugged in first.
**6 Postcondition(s)** (^) **Successful postcondition:**
The transaction is ongoing and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is _not_ ongoing. _or_
The CSMS is _not_ informed. _or_
Start Transaction - Id not accepted.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


plugin cable


StatusNotificationRequest(Occupied)
StatusNotificationResponse()
TransactionEventRequest(eventType  Started, triggerReason  CablePluggedIn, chargingState  EVConnected,
transactionId  AB1234, timestamp, evse.id  1, evse.connectorId  1, meterValues, ...)
TransactionEventResponse(...)


User authorization successful.


TransactionEventRequest(eventType  Updated, transactionId  AB1234, idToken.id  1234,
timestamp, triggerReason  Authorized, meterValues, ...)
TransactionEventResponse(...)


alt [if cable not permanently attached]
lock connector


start energy offer


TransactionEventRequest(eventType  Updated, transactionId  AB1234,
timestamp, chargingState  Charging, triggerReason  ChargingStateChanged, meterValues, ...)
TransactionEventResponse(...)

_Figure 45. Sequence Diagram: Start Transaction - Cable Plugin First_


7 Error handling Failing to respond with TransactionEventResponse will only cause the Charging Station to try the
same message again as specified in E12 - Transaction-related message not accepted by CSMS.
8 Remark(s) If the Charging Station has implemented an Authorization Cache, then upon receipt of
TransactionEventResponse, the Charging Station updates the cache entry.


The scenario description and sequence diagram above are based on the Configuration Variable
for start & stop transaction being configured as follows:
TxStartPoint: EVConnected, Authorized, DataSigned, PowerPathClosed, EnergyTransfer
This use-case is also valid for other configurations, but then the transaction might start at another
moment, which might change the sequence in which message are sent. For more details see the
use cases: E01 - Start Transaction options and E06 - Stop Transaction options.

**E02 - Start Transaction - Cable Plugin First - Requirements**

_Table 99. E02 - Requirements_


ID Precondition Requirement definition Note
E02.FR.01 After the EV Driver is authorized for
this transaction.


The next TransactionEventRequest SHALL contain
triggerReason : Authorized AND IdTokenType
information.
E02.FR.02 E02.FR.01 The CSMS SHALL send a
TransactionEventResponse that includes an
authorization status value.
E02.FR.03 This transaction ends a reservation. The next TransactionEventRequest SHALL contain
the reservationId.


See H. Reservation.


E02.FR.04 The CSMS SHALL verify the validity of the identifier
in TransactionEventRequest.


Because the identifier
might have been
authorized locally by the
Charging Station using
outdated information.

Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E02.FR.05 When a cable is plugged in The Charging Station SHALL send a
StatusNotificationRequest with status: Occupied


Alternatively, a
NotifyEventRequest
message for component (
name  'Connector',
evse.id  <x> ,
evse.connectorId  <y> ),
variable ( name =
'AvailabilityState' ),
and actualValue =
'Occupied'
MAY be sent to signal
that Connector <y> of
EVSE <x> is now
occupied.

E02.FR.06 (^) When a cable is plugged in
AND TxStartPoint contains
EVConnected
The Charging Station SHALL send a
TransactionEventRequest.
E02.FR.07 When a TransactionEventRequest has
to be created
The Charging Station SHALL set the messageâ€™s
**seqNo** field as specified in Sequence Number
Generation.
This enables the CSMS
to track the
completeness of
transaction information.
E02.FR.08 The transactionId generated by the Charging
Station MUST be unique for each transaction
started by that Charging Station, even when the
Charging Station is rebooted, repaired, firmware is
updated etc, it SHALL ensure that it never
generates the same TransactionId twice.
E02.FR.09 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is known at start of transaction
The Charging Station SHALL add the configured
measurands to the optional meterValue field with
_context_  Transaction.Begin in the
TransactionEventRequest(eventType  Started)
sent to the CSMS to provide more details during the
transaction.
E02.FR.10 When configured to send meter data
in the TransactionEventRequest
(eventType  Updated), See: Meter
Values - Configuration
The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Updated)
sent to the CSMS to provide more details during the
transaction.
E02.FR.11 (^) E02.FR.10
AND
Amount of meter data is too much for
1 TransactionEventRequest
(eventType  Updated)
The Charging Station MAY split meter data over
multiple TransactionEventRequest(eventType =
Updated) messages with the same _timestamp_.
E02.FR.13 If the charging state changes The Charging Station SHALL send a
TransactionEventRequest including the
chargingState element.
E02.FR.14 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
E02.FR.15 When sending a
TransactionEventRequest
The Charging Station SHALL set the triggerReason
to inform the CSMS about what triggered the event.
What reason to use is described in the description
of TriggerReasonEnumType.
E02.FR.16 After a transaction has been started The Charging Station MAY send additional
TransactionEventRequest(eventType  Updated)
messages during the transaction when a trigger
event occurs.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E02.FR.17 When a transaction-related trigger
event occurs, listed in
TriggerReasonEnumType AND
the transaction is ongoing.


The Charging Station SHALL send a
TransactionEventRequest with a triggerReason
corresponding to the occurred event.


When two trigger
reasons overlap, the
more specific one should
be used. For example,
when a cable is plugged
in, triggerReason
CablePluggedIn should
be used, not
ChargingStateChanged. It
is not forbidden to send
separate
TransactionEventReques
t messages for each
trigger, though.

E02.FR.18 (^) When the energy transfer starts AND
If the Charging Station is able to report
the number of phases used
The Charging Station SHALL provide the number of
phases used, using the _numberOfPhasesUsed_ field.
E02.FR.19 (^) E02.FR.18 AND
during the transaction the number of
phases used changes
The Charging Station SHALL provide the adjusted
number of phases used, using the
_numberOfPhasesUsed_ field.
E02.FR.20 When a transaction has not been
authorized before AND
the Charging Station authorizes an
_idToken_ to start charging
The next TransactionEventRequest from Charging
Station SHALL contain the _idToken_ and have
_triggerReason_  Authorized.
If authorization is not
successful, then no
TransactionEventReques
t is sent, because this
event has no effect on
the running transaction.
(For authorization to stop
charging, see E07).
E02.FR.21 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is not known at start of
transaction
The Charging Station SHALL add the measurands
for _eventType_  Started to the optional
meterValue field with _context_ =
Transaction.Begin in the
TransactionEventRequest(eventType  Updated)
that occurs when charging starts.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E03 - Start Transaction - IdToken First

_Table 100. E03 - Start Transaction - IdToken First_


No. Type Description
1 Name Start Transaction - IdToken First
2 ID E03
Functional block E. Transactions
3 Objective(s) To enable the EV Driver to start a transaction by first presenting an IdToken at the Charging
Station.
4 Description This use case covers how the EV Driver is first authorized by presenting an IdToken before the
cable is plugged in and a transaction starts.
Actors Charging Station, CSMS, EV Driver

_Scenario description_ (^) **1.** The EV Driver is authorized by the Charging Station and/or CSMS.

**2.** The Charging Station informs the CSMS that a transaction has started by sending a
TransactionEventRequest (eventType  Started).
**3.** The EV Driver plugs in the Charging Cable at the Charging Station.
**4.** The Charging Station sends StatusNotificationRequest to, and receives
StatusNotificationResponse from the CSMS.
**5.** The Charging Station informs the CSMS that the EV started charging by sending a
TransactionEventRequest (eventType  Updated, chargingState  Charging).
**6.** The CSMS responds with TransactionEventResponse, accepting the transaction.
**5 Prerequisite(s)** IdToken is presented prior to plugin cable.

**6 Postcondition(s)** (^) **Successful postcondition:**
A transaction is started and the ChargingState is _Charging_
**Failure postcondition:**
No transaction is started
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


User authorization successful.


TransactionEventRequest(eventType  Started, transactionId  AB1234, triggerReason  Authorized,
seqNo  N, timestamp, idToken.id  1234, ...)
TransactionEventResponse(idTokenInfo.status  Accepted,...)


alt [if within ConnectionTimeOut]
plugin cable
StatusNotificationRequest(Occupied)
StatusNotificationResponse()
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1,
timestamp, chargingState  EVConnected, triggerReason  CablePluggedIn, ...)
TransactionEventResponse(...)


alt [if cable not permanently attached]
lock connector


start energy offer


TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1,
timestamp, chargingState  Charging, triggerReason  ChargingStateChanged, ...)
TransactionEventResponse(...)
[if not within Connection Timeout]
TransactionEventRequest(eventType  Ended, triggerReason  EVConnectTimeout, transactionId  AB1234, seqNo  N + 1,
timestamp, meterValues, stoppedReason  Timeout)
TransactionEventResponse()


opt
notification

_Figure 46. Sequence Diagram: Start Transaction - IdToken First_


7 Error handling n/a
8 Remark(s) It is likely that the CSMS applies sanity checks to the data contained in TransactionEventRequest
messages it received. The outcome of such sanity checks SHOULD NOT ever cause the CSMS to
not respond with a TransactionEventResponse. Failing to do so will only cause the Charging
Station to try the same message again as specified in E12 - Transaction-related message not
accepted by CSMS.


The scenario description and sequence diagram above are based on the Configuration Variable
for start transaction being configured as follows:
TxStartPoint: Authorized, DataSigned, PowerPathClosed, EnergyTransfer
This use-case is also valid for other configurations, but then the transaction might start/stop at
another moment, which might change the sequence in which message are sent. For more details
see the use cases: E01 - Start Transaction options.

**E03 - Start Transaction - IdToken First - Requirements**

_Table 101. E03 - Requirements_


ID Precondition Requirement definition Note
E03.FR.01 When the IdToken information is
known.


The next TransactionEventRequest SHALL contain
IdTokenType information.
E03.FR.02 E03.FR.01 The CSMS SHALL send a
TransactionEventResponse that includes an
authorization status.
E03.FR.03 This transaction ends a reservation for
the specific IdToken.


The next TransactionEventRequest SHALL contain
the reservationId.


See H. Reservation.

Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E03.FR.05 When the EV Driver does not plug-in
the charging cable before the timeout
set by the Configuration Variable:
EVConnectionTimeOut AND
TxStopPoint does not contain
ParkingBayOccupancy


The Charging Station SHOULD end the transaction
and send a TransactionEventRequest (eventType =
Ended, stoppedReason  Timeout, triggerReason =
EVConnectionTimeout) to the CSMS.


This requirement is an
additional safety
measure to make sure
the transaction is ended
when the
EVConnectionTimeOu
t is triggered. However it
is up to the CSMS to
make sure that sensible
TxStartPoint /
TxStopPoint
combinations are
configured. E.g. if
Authorized is used as
TxStartPoint, it should
also be used as
TxStopPoint.
E03.FR.06 When a TransactionEventRequest has
to be created


The Charging Station SHALL set the messageâ€™s
seqNo field as specified in Sequence Number
Generation.


This enables the CSMS
to track the
completeness of
transaction information
E03.FR.07 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is known at start of transaction


The Charging Station SHALL add the configured
measurands to the optional meterValue field with
context  Transaction.Begin in the
TransactionEventRequest(eventType  Started)
sent to the CSMS to provide more details during the
transaction.


E03.FR.08 When configured to send meter data
in the TransactionEventRequest
(eventType  Updated), See: Meter
Values - Configuration


The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Updated)
sent to the CSMS to provide more details during the
transaction.

E03.FR.09 (^) E03.FR.08
AND
Amount of meter data is too much for
1 TransactionEventRequest
(eventType  Updated)
The Charging Station MAY split meter data over
multiple TransactionEventRequest(eventType =
Updated) messages with the same _timestamp_.
E03.FR.10 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
E03.FR.11 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is not known at start of
transaction
The Charging Station SHALL add the measurands
for _eventType_  Started to the optional
meterValue field with _context_ =
Transaction.Begin in the
TransactionEventRequest(eventType  Updated)
that occurs when charging starts.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E03.FR.12 When a transaction-related trigger
event occurs, listed in
TriggerReasonEnumType AND
the transaction is ongoing.


The Charging Station SHALL send a
TransactionEventRequest with a triggerReason
corresponding to the occurred event.


When two trigger
reasons overlap, the
more specific one should
be used. For example,
when a cable is plugged
in, triggerReason
CablePluggedIn should
be used, not
ChargingStateChanged.
When two events occur
at the same time, they
need transmitted using
two separate
TransactionEventReques
t messages. This is to
prevent information loss,
when something goes
wrong.

E03.FR.13 (^) When the energy transfer starts AND
If the Charging Station is able to report
the number of phases used
The Charging Station SHALL provide the number of
phases used, using the _numberOfPhasesUsed_ field.
E03.FR.14 (^) E03.FR.13 AND
during the transaction the number of
phases used changes
The Charging Station SHALL provide the adjusted
number of phases used, using the
_numberOfPhasesUsed_ field.
E03.FR.15 When the EV Driver does not plug-in
the charging cable before the timeout
set by the Configuration Variable:
EVConnectionTimeOut AND
TxStopPoint contains
ParkingBayOccupancy
The Charging Station SHALL deauthorize the
transaction and send a TransactionEventRequest
( _triggerReason_  EVConnectionTimeout) to the
CSMS.
Transaction will be
ended normally when
driver leaves the parking
bay.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E04 - Transaction started while Charging Station is offline.

_Table 102. E04 - Transaction started while Charging Station is offline_


No. Type Description
1 Name Transaction started while Charging Station is offline
2 ID E04
Functional block E. Transactions
3 Objective(s) To enable the EV Driver to start a transaction while the Charging Station is Offline.
4 Description This use case covers how the Charging Station, while Offline , is able to start a transaction using
the Local Authorization List or the Authorization Cache.
Actors Charging Station, CSMS, EV Driver

_Scenario description_ (^) **1.** The transaction starts.

**2.** The TransactionEventRequest (eventType  Started) is stored/queued by the Charging Station.
**3.** The connection between Charging Station and CSMS is restored.
**4.** The Charging Station starts to send queued messages
**5.** The stored TransactionEventRequest is sent, notifying the CSMS about the transaction that
was started.
_Alternative scenario(s)_ E10 - Connection Loss During Transaction

**5 Prerequisite(s)** (^) The Charging Station is _Offline_.
The EV Driver is offline/locally authorized by the Charging Station.
**6 Postcondition(s)** (^) **Successful postcondition:**
The TransactionEventRequest has been responded to by the CSMS AND has been removed from
the queue of the Charging Station.
**Failure postcondition:**
The TransactionEventRequest was NOT responded to by the CSMS AND remains in the queue of
the Charging Station.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


EV Driver

Charging Station CSMS

Charging Station is Offline

Offline user authorization successful

opt

notification

lock connector

start energy offer

store TransactionEventRequest(offline  true)

Connection loss can be minutes, but can also be days.

Connection restored.

HeartbeatRequest()

HeartbeatResponse()

send queued message()

loop [for all queued transaction messages]

TransactionEventRequest(offline  true)

TransactionEventResponse(...)

_Figure 47. Sequence Diagram: Transaction started while Charging Station is offline_

Edition 3 FINAL, 2024-05-06 **E. Transactions**



7 Error handling n/a
8 Remark(s) The scenario description and sequence diagram above are based on the Configuration Variable
for start transaction being configured as follows:
TxStartPoint: Authorized, DataSigned, PowerPathClosed, EnergyTransfer
This use-case is also valid for other configurations, but then the transaction might start/stop at
another moment, which might change the sequence in which message are sent. For more details
see the use cases: E01 - Start Transaction options.

**E04 - Transaction started while Charging Station is offline - Requirements**

_Table 103. E04 - Requirements_


ID Precondition Requirement definition Note
E04.FR.01 When Offline. The Charging Station MUST queue any
TransactionEventRequest messages.
E04.FR.02 After the connection is restored. The Charging Station MUST send queued
TransactionEventRequest messages.
E04.FR.03 E04.FR.02 The flag: "offline" SHALL be set to TRUE for any
TransactionEventRequest that occurred while the
Charging Station was offline.
E04.FR.04 When a TransactionEventRequest has
to be created


The Charging Station SHALL set the messageâ€™s
seqNo field as specified in Sequence Number
Generation.


This enables the CSMS
to track the
completeness of
transaction information
E04.FR.05 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is known at start of transaction


The Charging Station SHALL add the configured
measurands to the optional meterValue field with
context  Transaction.Begin in the
TransactionEventRequest(eventType  Started)
sent to the CSMS to provide more details during the
transaction.


E04.FR.06 When configured to send meter data
in the TransactionEventRequest
(eventType  Updated), See: Meter
Values - Configuration


The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Updated)
sent to the CSMS to provide more details during the
transaction.

E04.FR.07 (^) E04.FR.06
AND
_Offline_
AND
The Charging Station is running low on
memory
The Charging Station MAY drop
TransactionEventRequest(eventType  Updated)
messages.
E04.FR.08 E04.FR.07 When dropping TransactionEventRequest
(eventType  Updated) messages, the Charging
Station SHALL drop intermediate messages first
(1st message, 3th message, 5th message etc.), not
start dropping messages from the start or stop
adding messages to the queue.
E04.FR.09 (^) E04.FR.06
AND
Amount of meter data is too much for
1 TransactionEventRequest
(eventType  Updated)
The Charging Station MAY split meter data over
multiple TransactionEventRequest(eventType =
Updated) messages with the same _timestamp_.
E04.FR.10 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E04.FR.11 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration
AND
EVSE is not known at start of
transaction


The Charging Station SHALL add the measurands
for eventType  Started to the optional
meterValue field with context =
Transaction.Begin in the
TransactionEventRequest(eventType  Updated)
that occurs when charging starts.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E05 - Start Transaction - Id not Accepted

_Table 104. E05 - Start Transaction - Id not Accepted_


No. Type Description
1 Name Start Transaction - Id not Accepted
2 ID E05
Functional block E. Transactions
3 Objective(s) To enable the Charging Station to suspend a transaction when the IdToken has an
AuthorizationStatus that does not allow charging.
4 Description This use case covers how the Charging Station wants to start a transaction while the IdToken is
not accepted by the CSMS
Because the identifier might have been authorized locally by the Charging Station using outdated
information, the CSMS has to validate the IdTokenType in every TransactionEventRequest
message it receives that contains an IdTokenType. When receiving a TransactionEventResponse
message with idTokenInfo field status is not Accepted , the Charging Station should stop the
energy delivery to the EV.
Actors Charging Station, CSMS
Scenario description 1. The Charging Station sends TransactionEventRequest (eventType  Started) that contains the
IdToken provided by the EV Driver.

**2.** The CSMS responds with TransactionEventResponse, with an AuthorizationStatus that does
not allow charging.
**3.** The Charging Station suspends the energy offer. (Taking into account:
MaxEnergyOnInvalidId, if supported)
**4.** The Charging Station sends TransactionEventRequest (eventType  Updated) with trigger
_Deauthorized_ and the chargingState _SuspendedEVSE_ and receives TransactionEventResponse
from the CSMS.

**5 Prerequisite(s)** (^) The EV Driver is offline/locally authorized by the Charging Station.
The IdToken is not allowed to charge by the CSMS.
**6 Postcondition(s)** (^) **Successful postcondition:**
The transaction is kept ongoing, and the cable remains locked, but no energy is delivered.
**Failure postcondition:**
n/a
Charging Station CSMS
EV Driver locally authorized by the Charging Station.
TransactionEventRequest(eventType  Started, transactionId  AB1234, seqNo  N, timestamp,
evse.id  1, evse.connectorId  1, meterValues,...)
TransactionEventResponse(idTokenInfo.status  Blocked / Invalid / Expired / Unknown,...)
stop energy offer
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1, timestamp,
chargingState  SuspendedEVSE, triggerReason  Deauthorized, meterValues,...)
TransactionEventResponse(...)
_Figure 48. Sequence Diagram: Start Transaction - Id not Accepted_
**7 Error handling** n/a
Edition 3 FINAL, 2024-05-06 **E. Transactions**



8 Remark(s) The scenario description and sequence diagram above are based on the Configuration Variable
for start & stop transaction being configured as follows:
TxStartPoint: Authorized, DataSigned, PowerPathClosed, EnergyTransfer
TxStopPoint: ParkingBayOccupancy, EVConnected
This use-case is also valid for other configurations, but then the transaction might start/stop at
another moment, which might change the sequence in which message are sent. For more details
see the use cases: E01 - Start Transaction options and E06 - Stop Transaction options.

**E05 - Start Transaction - Id not Accepted - Requirements**

_Table 105. E05 - Requirements_


ID Precondition Requirement definition Note
E05.FR.01 The CSMS MUST verify validity of the identifier in
the TransactionEventRequest message.


The identifier might have
been authorized locally
by the Charging Station
using outdated
information. The
identifier, for instance,
may have been blocked
since it was added to the
Charging Stationâ€™s
Authorization Cache.

E05.FR.02 (^) E05.FR.01 AND
The authorization status in
TransactionEventResponse is not
_Accepted_ AND
The transaction is still ongoing AND
StopTxOnInvalidId is set to _false_
AND
MaxEnergyOnInvalidId is not
implemented or has been exceeded.
TxStopPoint does NOT contain:
EnergyTransfer
The Charging Station SHALL stop the energy
delivery to the EV immediately and send
TransactionEventRequest (eventType  Updated)
with _triggerReason_ set to _ChargingStateChanged_
and chargingState set to _SuspendedEVSE_
The transaction is not
deauthorized, but
transfer of energy stops,
since
MaxEnergyOnInvalid
Id has been exceeded or
is not set. If TxStopPoint
contains
EnergyTransfer then
this would have ended
the transaction.
E05.FR.03 (^) E05.FR.01 AND
The authorization status in
TransactionEventResponse is not
_Accepted_ AND
The transaction is still ongoing AND
StopTxOnInvalidId is set to _false_
AND
MaxEnergyOnInvalidId is set and
has NOT been exceeded.
Energy delivery to the EV SHALL be allowed until
the amount of energy specified in
MaxEnergyOnInvalidId has been reached.
E05.FR.04 When a TransactionEventRequest has
to be created
The Charging Station SHALL set the messageâ€™s
**seqNo** field as specified in Sequence Number
Generation.
This enables the CSMS
to track the
completeness of
transaction information.
E05.FR.05 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration AND
EVSE is known at start of transaction
The Charging Station SHALL add the configured
measurands to the optional meterValue field with
_context_  Transaction.Begin in the
TransactionEventRequest(eventType  Started)
sent to the CSMS to provide more details during the
transaction.
E05.FR.06 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
E05.FR.08 When configured to send meter data
in the TransactionEventRequest
(eventType  Started), See: Meter
Values - Configuration AND
EVSE is not known at start of
transaction
The Charging Station SHALL add the measurands
for _eventType_  Started to the optional
meterValue field with _context_ =
Transaction.Begin in the
TransactionEventRequest(eventType  Updated)
that occurs when charging starts.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note

E05.FR.09 (^) E05.FR.01 AND
The authorization status in
TransactionEventResponse is not
_Accepted_ AND
The transaction is still ongoing AND
StopTxOnInvalidId is _true_ AND
TxStopPoint does NOT contain:
(Authorized OR PowerPathClosed OR
EnergyTransfer)
The Charging Station SHALL stop the energy
transfer and send TransactionEventRequest
(eventType  Updated) with _triggerReason_ set to
_Deauthorized_ and in the same or next
TransactionEventRequest report _chargingState_ set
preferably to _EVConnected_ , or alternatively to
_SuspendedEVSE_.
If the physical change of
charging state in the
Charging Station occurs
a few seconds or
milliseconds later than
the trigger _Deauthorized_ ,
then the _chargingState_
change may be reported
separately as a
_triggerReason_ =
_ChargingStateChanged_.
Use of charging state
_SuspendedEVSE_ that is
not followed by
_EVConnected_ in this
situation will become
deprecated in the next
OCPP release.
E05.FR.10 (^) E05.FR.01 AND
The authorization status in
TransactionEventResponse is not
_Accepted_ AND
The transaction is still ongoing AND
StopTxOnInvalidId is _true_ AND
TxStopPoint does contain:
(Authorized OR PowerPathClosed OR
EnergyTransfer)
The Charging Station SHALL stop the transaction
and send TransactionEventRequest (eventType =
Ended) with _triggerReason_ set to _Deauthorized_ and
stoppedReason set to _DeAuthorized_.
E05.FR.11 (^) E05.FR.10 AND
If the Charging Station has the
possibility to lock the Charging Cable
The Charging Station SHOULD keep the Charging
Cable locked until the owner presents his identifier.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E06 - Stop Transaction options

_Table 106. E06 - Stop Transaction_


No. Type Description
1 Name Stop Transaction options
2 ID E06
Functional block E. Transactions
3 Objective(s) To inform the CSMS that a transaction at the Charging Station has stopped.
4 Description This use case describes the different moment a Charging Station can stop a transaction (send
TransactionEventRequest (eventType  Ended), depending on the configuration of the Charging
Station.
5 Actors Charging Station, CSMS, EV Driver
S1 Scenario objective Stop a transaction when a parking bay occupancy no longer detector detects the EV.

_Scenario description_ (^) **1.** The Charging Stations parking bay occupancy detector stops detecting the EV.

**2.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: ParkingBayOccupancy
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
Charging Station CSMS
A transaction is ongoing.
parking bay detector
no longer detects the EV
TransactionEventRequest(eventType  Ended,
triggerReason  EVDeparted, stoppedReason  Local, ...)
TransactionEventResponse()
_Figure 49. Sequence Diagram: Stop Transaction options - ParkingBayOccupancy_
**S2** _Scenario objective_ **Stop a transaction when communication between the Charging Station and the EV is lost. (for
example: cable unplugged)**
_Scenario description_ (^) **1.** Communication between Charging Station and the EV is lost (Charging cable is unplugged).

**2.** If charging cable unplugged on the Charging Station side: send StatusNotificationRequest to
the CSMS to inform it about a Connector that became _Available_.
**3.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**4.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: EVConnected
Edition 3 FINAL, 2024-05-06 **E. Transactions**



S2 Scenario objective Stop a transaction when communication between the Charging Station and the EV is lost. (for
example: cable unplugged)

**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
EV Driver
Charging Station CSMS
A transaction is ongoing.
unplug charging cable
stop energy offer
TransactionEventRequest(eventType  Ended, chargingState  idle,
triggerReason  EVCommunicationLost, stoppedReason  EVDisconnected)
TransactionEventResponse()
_Figure 50. Sequence Diagram: Stop Transaction options - EVConnected_
**S3** _Scenario objective_ **Stop a transaction when the driver is no longer authorized.**
_Scenario description_ **1.** The Charging Station sends a TransactionEventRequest to the CSMS. **2.** An invalid IdToken is
received in a TransactionEventResponse.

**3.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**4.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: Authorized
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


Charging Station CSMS


TxStopPoint
contains "Authorized".


User locally authorized by the Charging Station


TransactionEventRequest(...)


TransactionEventResponse(idTokenInfo.status ! Accepted, ...)


stop energy offer


alt [If StopTxOnInvalidId is true]
TransactionEventRequest(eventType  Ended,
triggerReason  Deauthorized, stoppedReason  DeAuthorized, ...)


TransactionEventResponse(...)


[If StopTxOnInvalidId is false]
TransactionEventRequest(eventType  Updated,
triggerReason  ChargingStateChanged, ...)


TransactionEventResponse(...)

_Figure 51. Sequence Diagram: Stop Transaction options - Deauthorized_


S5 Scenario objective Stop a transaction when the EV driver is no longer authorized and/or the EV is disconnected.

_Scenario description_ (^) **1.** The Charging Station is disconnected from EV and/or the EV driver is no longer authorized.

**2.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: PowerPathClosed
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
Charging Station CSMS
A transaction is ongoing.
TransactionEventRequest(eventType  Ended, chargingState  EVConnected, ...)
TransactionEventResponse()
_Figure 52. Sequence Diagram: Stop Transaction options - PowerPathClosed_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



S6 Scenario objective Stop a transaction when energy transfer stops. This will also mean the transaction stops when
the EV stops taking energy, for example when the battery is to hot.
Scenario description 1. The energy transfer between EV and the Charging Station stops (for example: EV stops
charging).

**2.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: EnergyTransfer
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
EV
Charging Station CSMS
A transaction is ongoing.
energy transfer stopped
stop energy offer
TransactionEventRequest(eventType  Ended, ...)
TransactionEventResponse()
_Figure 53. Sequence Diagram: Stop Transaction options - EnergyTransfer_
**S7** _Scenario objective_ **Stop a transaction when EV driver ends authorization**
_Scenario description_ (^) **1.** The EV drivers presents an IdToken to end the charging.

**2.** The Charging Station sends a TransactionEventRequest (eventType  Ended) notifying the
CSMS about a transaction that has ended.
**3.** The CSMS responds with a TransactionEventResponse, confirming that the
TransactionEventRequest was received.

**Prerequisite(s)** (^) A transaction is ongoing.
Configuration Variable: TxStopPoint contains: Authorized (or PowerPathClosed).
**Postcondition(s)** (^) **Successful postcondition:**
The transaction is ended and the CSMS is _Successfully_ informed.
**Failure postcondition:**
The transaction is still ongoing. _or_
The CSMS is _not_ informed.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


User authorization successful.


opt [if cable not permanently attached & (same identification or authorized)]
unlock connector


TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 1, timestamp,
chargingState  EVConnected, triggerReason  StopAuthorized, idToken.id  1234, stoppedReason  Local)


TransactionEventResponse(idTokenInfo.status  Accepted / Blocked / Invalid / Expired)

_Figure 54. Sequence Diagram: Stop Transaction options - Authorized_


7 Error handling n/a
8 Remark(s) n/a

**E06 - Stop Transaction options - Requirements**

_Table 107. E06 - Requirements_


ID Precondition Requirement definition
E06.FR.01 TxStopPoint contains:
ParkingBayOccupancy
AND
Parking Bay Detector no longer detects the
"EV"


The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.

E06.FR.02 (^) TxStopPoint contains: EVConnected
AND
Connection between Charging Station and
EV is lost.
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.03 (^) TxStopPoint contains: Authorized
AND
EV Driver is authorized to stop a
transaction.
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.04 (^) TxStopPoint contains: Authorized
AND
CSMS returns a non-valid idTokenInfo in a
TransactionEventResponse
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.05 (^) TxStopPoint contains: DataSigned
AND
Charging Station can no longer retrieve
signed meter values.
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.06 TxStopPoint contains:
PowerPathClosed
AND (
Connection between Charging Station and
EV is lost
OR
Authorization has ended or idToken is
deauthorized )
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.07 (^) TxStopPoint contains: EnergyTransfer
AND
Energy transfer stops
The Charging Station SHALL stop the transaction and send a
TransactionEventRequest (eventType  Ended) to the CSMS.
E06.FR.08 If a transaction is not ended by the EV
Driver at the Charging Station
The Charging Station SHALL include the stoppedReason element in the
TransactionEventRequest(eventType  Ended). What reason to use is
described in the description of reasonEnumType.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition
E06.FR.09 If a transaction is ended by the EV Driver at
the Charging Station (e.g. EV Driver
presented IdToken to stop the transaction)


The Charging Station MAY omit the stoppedReason element in the
TransactionEventRequest (eventType  Ended) (hence the CSMS can
interpret the reason as local when omitted).
E06.FR.10 As part of the normal transaction
termination.


The Charging Station SHALL unlock the cable (if not permanently attached).


E06.FR.11 When configured to send meter data in the
TransactionEventRequest (eventType =
Ended), See: Meter Values - Configuration


The Charging Station SHALL add the configured measurands to the
optional meterValue field with context  Transaction.End in the
TransactionEventRequest(eventType  Ended) sent to the CSMS to provide
more details about transaction usage.
E06.FR.12 E06.FR.11
AND
The Charging Station is running low on
memory


The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended) message.


E06.FR.13 E06.FR.12 When dropping meter data, the Charging Station SHALL drop intermediate
values first (1st value, 3th value, 5th etc), not start dropping values from the
start of the list or stop adding values to the list.
E06.FR.14 When a TransactionEventRequest has to
be created


The Charging Station SHALL set the messageâ€™s seqNo field as specified in
Sequence Number Generation.
E06.FR.15 When sending a TransactionEventRequest The Charging Station SHALL set the triggerReason to inform the CSMS
about what triggered the event. What reason to use is described in the
description of TriggerReasonEnumType.
E06.FR.16 A transaction was stopped by an
Abnormal Error or Fault Condition.


The Charging Station SHALL send TransactionEventRequest(eventType =
Ended, triggerReason=AbnormalCondition)_ to the CSMS.

==== E07 - Transaction locally stopped by IdToken.

_Table 108. E07 - Transaction locally stopped by IdToken_


No. Type Description
1 Name Transaction locally stopped by IdToken
2 ID E07
Functional block E. Transactions
3 Objective(s) The EV Driver wants to stop an ongoing transaction, by locally presenting his IdToken.
4 Description This use case covers how the EV Driver can stop a transaction when he wants to leave the
charging station.
Actors Charging Station, CSMS, EV Driver


Scenario description
TxStopPoint =
Authorized (or
PowerPathClosed)

**1.** The EV Driver presents IdToken a second time to end charging.
**2.** The Charging Station stops the energy transfer and if the cable is not permanently attached, the
Charging Station unlocks the cable.
**3.** The Charging Station sends a TransactionEventRequest (eventType  Ended) with
_triggerReason_  StopAuthorized and _stoppedReason_  Local.
**4.** The CSMS responds with a TransactionEventResponse.


Alternative scenario(s)
TxStopPoint =
Authorized (or
PowerPathClosed)


Transaction ends with triggerReason=ChargingStateChanged when stopping charging:

**1.** The EV Driver presents IdToken a second time to end charging.
**2.** The Charging Station sends a TransactionEventRequest (eventType  Updated) with
_triggerReason_  StopAuthorized
**3.** The CSMS responds with a TransactionEventResponse.
**4.** The Charging Station stops the energy transfer and if the cable is not permanently attached, the
Charging Station unlocks the cable.
**5.** The Charging Station sends a TransactionEventRequest (eventType  Ended) with
_triggerReason_  ChargingStateChanged, _transactionInfo.chargingState_  EVConnected
**6.** The CSMS responds with a TransactionEventResponse.
**5 Prerequisite(s)** A transaction is ongoing.

Edition 3 FINAL, 2024-05-06 **E. Transactions**



No. Type Description

**6 Postcondition(s)** (^) **Successful postcondition:**
The CSMS has received all relevant information about the transaction and the Charging Station is
in _Idle_ status.
**Failure postcondition:**
The transaction is still ongoing or the Charging Station is in Idle status and still holds information
about the transaction that it has to deliver to the CSMS.
EV Driver
Charging Station CSMS
User authorization successful.
alt [TxStopPoint  Authorized OR TxStopPoint  PowerPathClosed]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 1, timestamp,
triggerReason  StopAuthorized, stoppedReason  Local, idToken.id  1234, meterValues)
TransactionEventResponse(idTokenInfo.status)
[TxStopPoint  EVConnected OR TxStopPoint  ParkingBayOccupancy OR TxStopPoint  EnergyTransfer]
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1, timestamp,
triggerReason  StopAuthorized, idToken.id  1234)
TransactionEventResponse(idTokenInfo.status)
opt [if cable not permanently attached & (same identification or authorized)]
unlock connector
alt [TxStopPoint  EnergyTransfer]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 2, timestamp,
triggerReason  ChargingStateChanged, chargingState  EVConnected, stoppedReason  Local, meterValues)
TransactionEventResponse()
[TxStopPoint  EVConnected OR TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1, timestamp,
triggerReason  ChargingStateChanged, chargingState  EVConnected)
TransactionEventResponse()
Unplug cable
StatusNotificationRequest(Available)
StatusNotificationResponse()
alt [TxStopPoint  EVConnected]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVCommunicationLost, stoppedReason  Local)
TransactionEventResponse()
[TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVCommunicationLost)
TransactionEventResponse()
Drive out of parking bay
alt [TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVDeparted, stoppedReason  Local)
TransactionEventResponse()
_Figure 55. Sequence Diagram: Transaction locally stopped by IdToken with TransactionEventRequest reported strictly by TxStopPoint
configuration_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


User authorization successful.


TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1, timestamp,
triggerReason  StopAuthorized, idToken.id  1234)
TransactionEventResponse(idTokenInfo.status)


opt [if cable not permanently attached & (same identification or authorized)]
unlock connector


alt [TxStopPoint  Authorized OR PowerPathClosed OR EnergyTransfer]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 2, timestamp,
triggerReason  ChargingStateChanged, chargingState  EVConnected, stoppedReason  Local, meterValues)
TransactionEventResponse()
[TxStopPoint  EVConnected OR TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 2, timestamp,
triggerReason  ChargingStateChanged, chargingState  EVConnected, meterValues)
TransactionEventResponse()


Unplug cable
StatusNotificationRequest(Available)
StatusNotificationResponse()


alt [TxStopPoint  EVConnected]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVCommunicationLost, stoppedReason  Local)
TransactionEventResponse()
[TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVCommunicationLost)
TransactionEventResponse()


Drive out of parking bay


alt [TxStopPoint  ParkingBayOccupancy]
TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 3, timestamp,
triggerReason  EVDeparted, stoppedReason  Local)
TransactionEventResponse()

_Figure 56. Sequence Diagram: Transaction locally stopped by IdToken with delayed TransactionEventRequest eventType  Ended for
TxStopPoint  Authorized OR PowerPathClosed_


7 Error handling n/a

**8 Remark(s)** (^) The scenario descriptions are based on TxStopPoint containing Authorized or PowerPathClosed.
The sequence diagrams also show behavior for other TxStopPoint values in the alt-blocks.
The CSMS cannot prevent a transaction from stopping.
**E07 - Transaction locally stopped by IdToken - Requirements**
_Table 109. E07 - Requirements_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E07.FR.01 When an idToken is presented during
a transaction that has been authorized
AND
(a) the presented idToken is the same
as the idToken that started the
authorization
OR
(b) when the presented idToken is in
the Local Authorization List or
Authorization Cache AND is valid AND
has the same GroupIdToken as the
IdToken that started the authorization.


The Charging Station SHALL end the authorization
of the transaction, without first sending an
AuthorizeRequest


The idToken that started
the authorization can
always be used to end
the authorization.
Ending authorization will
end delivery of energy.
Depending on the
TxStopPoint ending of
the authorization may
also end the transaction.
(See C01.FR.03)


E07.FR.02 E07.FR.01 The Charging Station SHALL send a
TransactionEventRequest with triggerReason =
StopAuthorized and SHOULD include the
idToken used to stop authorization.


The stopping idToken
may differ from the
starting idToken , when
they share the same
GroupId.
E07.FR.04 If a transaction is stopped on request
of the EV driver at the Charging
Station.


Charging Station MAY omit the stoppedReason
element from the final TransactionEventRequest
with eventType  Ended


e.g. EV-driver presented
IdToken to stop the
transaction or pressed a
"stop" button (not the
emergency stop).
See use case F03 for
remotely stopping.
E07.FR.05 If a transaction is stopped on request
of the EV driver at the Charging
Station.


Charging Station SHOULD use a stoppedReason =
Local in the final TransactionEventRequest with
eventType  Ended.


e.g. EV-driver presented
IdToken to stop the
transaction or pressed a
"stop" button (not the
emergency stop).
See use case F03 for
remotely stopping.
E07.FR.06 If a transaction is stopped, but not on
request of the EV driver at the
Charging Station.


Charging Station SHOULD use the most appropriate
value from ReasonEnumType for stoppedReason in
the final TransactionEventRequest with eventType =
Ended.


Apart from remotely
stopping (Remote),
CSMS revoking
authorization
(DeAuthorized) or
disconnecting the EV
(EVDisconnected),
most other reasons are
related to technical faults
or energy limitations.
E07.FR.07 As part of the normal transaction
termination.


The Charging Station SHALL unlock the cable (if
not permanently attached).
E07.FR.08 When configured to send meter data
in the TransactionEventRequest
(eventType  Ended), See: Meter
Values - Configuration


The Charging Station SHALL add the configured
measurands to the optional meterValue field with
context  Transaction.End in the
TransactionEventRequest(eventType  Ended) sent
to the CSMS to provide more details about
transaction usage.

E07.FR.09 (^) E07.FR.08
AND
The Charging Station is running low on
memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended)
message.
E07.FR.10 E07.FR.09 When dropping meter data, the Charging Station
SHALL drop intermediate values first (1st value, 3th
value, 5th etc), not start dropping values from the
start of the list or stop adding values to the list.
E07.FR.11 When a TransactionEventRequest has
to be created
The Charging Station SHALL set the messageâ€™s
**seqNo** field as specified in Sequence Number
Generation.
This enables the CSMS
to track the
completeness of
transaction information
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E07.FR.12 SampledDataSignReadings is true The Charging Station SHALL retrieve signed meter
values and put them in the signedMeterValue field
of sampledValues.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E08 - Transaction stopped while Charging Station is offline

_Table 110. E08 - Transaction stopped while Charging Station is offline_


No. Type Description
1 Name Transaction stopped while Charging Station is offline
2 ID E08
Functional block E. Transactions
Parent use case E07 - Local Stop Transaction
3 Objective(s) To enable the EV Driver to stop a transaction while the Charging Station is Offline.
4 Description This use case describes how an EV Driver can stop a transaction while the Charging Station is
Offline. While a transaction is ongoing and the Charging Station is Offline , the EV Driver presents
his IdToken, if the Charging Stations knows locally (without asking the CSMS) that this IdToken is
allowed to stop the transaction, it will stop the ongoing transaction.
When the Charging Station restores the connection with the CSMS, it needs to send the
information about this Offline stop transaction to the CSMS.
Actors Charging Station, CSMS, EV Driver

_Scenario description_ (^) **1.** The EV Driver presents IdToken to stop the transaction.

**2.** When this is the same IdToken as was used to start the transaction, or via the Local
Authorization List and / or Authorization Cache the GroupId can be validated: the transaction is
stopped.
**3.** The Charging Station stops the energy offer.
**4.** The TransactionEventRequest (eventType  Ended) is stored/queued by the Charging Station.
**5.** The connection between Charging Station and CSMS is restored.
**6.** The Charging Station starts to send queued messages
**7.** The stored TransactionEventRequest is sent, notifying the CSMS about the transaction that
was stopped.
**5 Prerequisite(s)** Transaction ongoing and connection lost.
**6 Postcondition(s)** Charging Station is in _Idle_ status.

Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


Charging Station is Offline and a transaction is ongoing.


present idToken


alt [if idToken matches or groupId can be validated]
stop energy offer


alt [if cable not permanently attached]
unlock connector


Store TransactionEventRequest(eventType  Ended,
offline  true)


Connection loss can be minutes, but can also be days.


Connection restored.


HeartbeatRequest()


HeartbeatResponse()


send queued message()


TransactionEventRequest(eventType  Ended,
offline  true)


TransactionEventResponse()

_Figure 57. Sequence Diagram: Transaction stopped while Charging Station is offline_


7 Error handling n/a

**8 Remark(s)** (^) groupId check must be done on Local Authorization List and / or Authorization Cache if available.
The scenario description and sequence diagram above are based on the Configuration Variable
for stop transaction being configured as follows.
TxStopPoint: ParkingBayOccupancy, EVConnected, Authorized
This use-case is also valid for other configurations, but then the transaction might stop at another
moment, which might change the sequence in which message are sent. For more details see the
use case: E06 - Stop Transaction options
**E08 - Transaction stopped while Charging Station is offline - Requirements**
_Table 111. E08 - Requirements_
**ID Precondition Requirement definition Note**
E08.FR.01 If the IdToken presented is the same
as the IdToken used to start the
transaction.
The Charging Station SHALL stop the energy
offering.
E08.FR.02 If the IdToken presented has the same
GroupId as the IdToken used to start
the transaction.
The Charging Station SHALL stop the energy
offering.
E08.FR.03 (^) (E08.FR.01 OR E08.FR.02)
AND
Cable not permanently attached
The Charging Station SHALL unlock the connector.
E08.FR.04 (E08.FR.01 OR E08.FR.02) The Charging Station SHALL "generate" a
TransactionEventRequest (eventType  Ended).
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E08.FR.05 When Offline. The Charging Station MUST queue any
TransactionEventRequest messages.
E08.FR.06 After the connection is restored. The Charging Station MUST send queued
TransactionEventRequest messages.
E08.FR.07 The flag: offline SHALL be set to TRUE for any
TransactionEventRequest that occurred while the
Charging Station was offline.
E08.FR.08 When a TransactionEventRequest has
to be created


The Charging Station SHALL set the messageâ€™s
seqNo field as specified in Sequence Number
Generation.


This enables the CSMS
to track the
completeness of
transaction information.
E08.FR.09 When configured to send meter data
in the TransactionEventRequest
(eventType  Ended), See: Meter
Values - Configuration


The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Ended) sent
to the CSMS to provide more details about
transaction usage.

E08.FR.10 (^) E08.FR.09
AND
The Charging Station is running low on
memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended)
message.
E08.FR.11 E08.FR.10 When dropping meter data, the Charging Station
SHALL drop intermediate values first (1st value, 3th
value, 5th etc), not start dropping values from the
start of the list or stop adding values to the list.
E08.FR.12 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E09 - When cable disconnected on EV-side: Stop Transaction

_Table 112. E09 - When cable disconnected on EV-side: Stop Transaction_


No. Type Description
1 Name When cable disconnected on EV-side: Stop Transaction
2 ID E09
Functional block E. Transactions
Parent use case E07 - Local Stop Transaction
3 Objective(s) To stop an ongoing transaction when the Charging Cable is unplugged on the EV side.
4 Description This use case covers how a transaction is stopped when the EV Driver unplugs the cable at the EV
side. In this use case the Configuration Variable: StopTxOnEVSideDisconnect  true.


The Charging Cable is unplugged at the EV side. This is detected by the Charging Station. The
Charging Station stops the transaction and sends a TransactionEventRequest to the CSMS. The
Charging Cable, if locked and UnlockOnEvSideDisconnect  false, will remain locked at the
Charging Station until the EV Driver returns and presents his/hers IdToken. Otherwise it will
unlock the cable.
Actors Charging Station, CSMS, EV Driver

_Scenario description_ (^) **1.** The cable is unplugged at the EV.

**2.** The energy offer is suspended.
**3.** The Charging Station sends TransactionEventRequest (eventType  Ended, stoppedReason =
EVDisconnected) to the CSMS.
**4.** The CSMS responds with TransactionEventResponse.
**5.** The EV Driver is authorized and unplugs the cable.
**6.** The Charging Station sends StatusNotificationRequest to the CSMS with the status _Available_.
**7.** The CSMS responds with StatusNotificationResponse.
_Alternative scenario(s)_ E09 - When cable disconnected on EV-side: Suspend Transaction

**5 Prerequisite(s)** (^) Configuration Variable: StopTxOnEVSideDisconnect  true
A transaction is ongoing
**6 Postcondition(s)** (^) **Successful postcondition:**
The Charging Station is in _Idle_ status.
**Failure postcondition:**
n/a
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


A transaction is ongoing.


unplug cable at car side


suspend energy offer


TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqN  N + 1, timestamp,
triggerReason  EVCommunicationLost, stoppedReason  EVDisconnected, meterValues)
TransactionEventResponse()


alt [if cable not permanently attached & UnlockOnEVSideDisconnect  true]
unlock connector


[if cable not permanently attached & UnlockOnEVSideDisconnect  false]
User authorization successful.


unlock connector


Unplug cable


StatusNotificationRequest(Available)
StatusNotificationResponse()

_Figure 58. Sequence Diagram: When cable disconnected on EV-side: Stop Transaction_


7 Error handling n/a

**8 Remark(s)** (^) When the Charging Cable is plugged back in, the charging will not resume/continue.
The scenario description and sequence diagram above are based on the Configuration Variable
for stop transaction being configured as follows.
TxStopPoint: Authorized
This use-case is also valid for other configurations, but then the transaction might stop at another
moment, which might change the sequence in which message are sent. For more details see the
use case: E06 - Stop Transaction options
**E09 - When cable disconnected on EV-side: Stop Transaction - Requirements**
_Table 113. E09 - Requirements_
**ID Precondition Requirement definition Note**
E09.FR.01 If StopTxOnEVSideDisconnect =
_true_.
The transaction SHALL be deauthorized when the
cable is disconnected from the EV. If the EV is
reconnected, energy transfer is not allowed until the
transaction is authorized once again.
Setting
StopTxOnEVSideDisc
onnect to _true_ will
prevent sabotage acts
when unplugging not
locked cables on EV side.
E09.FR.02 (^) E09.FR.01
AND
the cable is not permanently attached
AND
UnlockOnEvSideDisconnect =
true.
The Charging Station SHALL unlock the Charging
Cable.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note

E09.FR.03 (^) E09.FR.01
AND
the cable is not permanently attached
AND
UnlockOnEvSideDisconnect =
false.
The Charging Station SHALL unlock the Charging
Cable only after authorization by the EV Driver.
E09.FR.04 When a TransactionEventRequest has
to be created
The Charging Station SHALL set the messageâ€™s
**seqNo** field as specified in Sequence Number
Generation.
This enables the CSMS
to track the
completeness of
transaction information
E09.FR.05 When configured to send meter data
in the TransactionEventRequest
(eventType  Ended), See: Meter
Values - Configuration
The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Ended) sent
to the CSMS to provide more details about
transaction usage.
E09.FR.06 (^) E09.FR.05
AND
The Charging Station is running low on
memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended)
message.
E09.FR.07 E09.FR.06 When dropping meter data, the Charging Station
SHALL drop intermediate values first (1st value, 3th
value, 5th etc), not start dropping values from the
start of the list or stop adding values to the list.
E09.FR.08 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E10 - When cable disconnected on EV-side: Suspend Transaction

_Table 114. E10 - When cable disconnected on EV-side: Suspend Transaction_


No. Type Description
1 Name When cable disconnected on EV-side: Suspend Transaction
2 ID E10
Functional block E. Transactions
Parent use case E07 - Local Stop Transaction
3 Objective(s) To suspend an ongoing transaction when the Charging Cable is unplugged on the EV side.
4 Description This use case covers how a transaction is suspended when the EV Driver unplugs the cable at the
EV side. In this use case the Configuration Variable: StopTxOnEVSideDisconnect  false.


The Charging Cable is unplugged at the EV side. This is detected by the Charging Station. The
Charging Station stops the energy offering (safety), but does not stop the transaction. The
Charging Cable, if locked, will remain locked at the Charging Station until the EV Driver returns and
presents his/hers IdToken.
Actors Charging Station, CSMS, EV Driver

_Scenario description_ (^) **1.** EV Driver unplugs the cable at the EV while a transaction is ongoing.

**2.** The energy offer is suspended.
_If the EV Driver plugs the cable back in, the transaction is resumed._
**A1.** The Charging Station sends a TransactionEventRequest (eventType  Updated, trigger =
CablePluggedIn)
**A2.** The CSMS responds with a TransactionEventResponse.
_If cable not permanently attached_
**B1.** The EV Driver is authorized by the Charging Station and/or CSMS to unlock the charging
cable.
**B2.** The Cable is unlocked.
**B3.** The Charging Station sends a TransactionEventRequest (eventType  Ended, trigger =
StopAuthorized).
**B4.** The EV Driver removes the charging cable.
**B5.** The Charging Station sends a StatusNotificationRequest to the CSMS with the status
_Available_.
**B6.** The CSMS responds with a StatusNotificationResponse.
_If cable permanently attached_
**C1.** The Cable is not plugged in within timeout.
**C2.** The Charging Station sends a TransactionEventRequest (eventType  Ended, trigger =
EVCommunicationLost, stoppedReason  EVDisconnected).
**C3.** The Charging Station sends a StatusNotificationRequest to the CSMS with the status
_Available_.
**C4.** The CSMS responds with a StatusNotificationResponse.

_Alternative scenario(s)_ (^) E09 - When cable disconnected on EV-side: Stop Transaction
**5 Prerequisite(s)** (^) Configuration Variable: StopTxOnEVSideDisconnect  false
A transaction is ongoing
**6 Postcondition(s)** (^) **Successful postcondition:**
The Charging Station is in _Idle_ status.
The regular transaction is resumed.
**Failure postcondition:**
n/a
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Driver


Charging Station CSMS


A transaction is ongoing.


unplug cable at car side
suspend energy offer


TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 1,
timestamp, chargingState  SuspendedEV, triggerReason  EVCommunicationLost, meterValues)
TransactionEventResponse()


alt [if Cable is plugged in]
plugin cable
resume energy offer


TransactionEventRequest(eventType  Updated, transactionId  AB1234, seqNo  N + 2,
timestamp, chargingState  Charging, triggerReason  CablePluggedIn, meterValues)
TransactionEventResponse()


Continue with E02 - Start Transaction - Cable Plugin First from Ref #1.
[if cable not permanently attached.]
User authorization successful.


unlock connector


TransactionEventRequest(eventType  Ended, transactionId  AB1234, seqNo  N + 2,
timestamp, triggerReason  StopAuthorized, meterValues)
TransactionEventResponse()
unplug cable
StatusNotificationRequest(Available)
StatusNotificationResponse()
[if cable permanently attached]
timeout()


TransactionEventRequest(eventType  Ended, stoppedReason  Timeout,
transactionId  AB1234, seqNo  N + 2,timestamp, meterValues)
TransactionEventResponse()
StatusNotificationRequest(Available)
StatusNotificationResponse()

_Figure 59. Sequence Diagram: When cable disconnected on EV-side: Suspend Transaction_


7 Error handling n/a

**8 Remark(s)** (^) When the Charging Cable is plugged back in, the charging is resumed.
When the cable is permanently attached and the cable is not plugged in within a certain timeout,
the Charging Station stops the transaction. This timeout is not defined by OCPP, it is left to the
implementor of the Charging Station.
The scenario description and sequence diagram above are based on the Configuration Variable
for stop transaction being configured as follows.
TxStopPoint: ParkingBayOccupancy, Authorized
This use-case is also valid for other configurations, but then the transaction might stop at another
moment, which might change the sequence in which message are sent. For more details see the
use case: E06 - Stop Transaction options
**E10 - When cable disconnected on EV-side: Suspend Transaction - Requirements**
_Table 115. E10 - Requirements_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition Note
E10.FR.01 Cable not permanently attached The Connector SHALL remain locked at the
Charging Station until the EV Driver presents the
IdToken.

E10.FR.02 (^) Cable permanently attached
AND
Cable not plugged in within timeout
The Charging Station SHALL deauthorize the
transaction.
E10.FR.03 When a TransactionEventRequest has
to be created
The Charging Station SHALL set the messageâ€™s
**seqNo** field as specified in Sequence Number
Generation.
This enables the CSMS
to track the
completeness of
transaction information
E10.FR.04 When configured to send meter data
in the TransactionEventRequest
(eventType  Ended), See: Meter
Values - Configuration
The Charging Station SHALL add the configured
measurands to the optional meterValue field in the
TransactionEventRequest(eventType  Ended) sent
to the CSMS to provide more details about
transaction usage.
E10.FR.05 (^) E10.FR.04
AND
The Charging Station is running low on
memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended)
message.
E10.FR.06 E10.FR.05 When dropping meter data, the Charging Station
SHALL drop intermediate values first (1st value, 3th
value, 5th etc), not start dropping values from the
start of the list or stop adding values to the list.
E10.FR.07 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter
values and put them in the _signedMeterValue_ field
of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E11 - Connection Loss During Transaction

_Table 116. E11 - Connection Loss During Transaction_


No. Type Description
1 Name Connection Loss During Transaction
2 ID E11
Functional block E. Transactions
3 Objective(s) To enable a Charging Station to continue a transaction while the Charging Station loses its
connection
4 Description This use cases describes how a Charging Station can continue an ongoing transaction while
losing and regaining the connection with the CSMS.
Actors Charging Station, CSMS

_Scenario description_ (^) **1.** The connection of the Charging Station is lost, while a transaction is ongoing.

**2.** The transaction events of the Charging Station are stored.
**3.** The connection with the CSMS is restored.
**4.** The Charging Station sends the stored transaction events to the CSMS using
TransactionEventRequest (offline  TRUE).
**5.** The Charging Station resumes regular communication.
_Alternative scenario(s)_ E04 - Offline Start Transaction
**5 Prerequisite(s)** Transaction ongoing and connection lost.

**6 Postcondition(s)** (^) **Successful postcondition:**
The Charging Station resumes regular communication.
**Failure postcondition:**
n/a
Charging Station CSMS
A transaction is ongoing.
Connection loss.
opt
loop [while transaction running]
store TransactionEventRequest() messages
Connection restored.
loop [for all stored TransactionEventRequest() messages]
TransactionEventRequest(offline  true)
TransactionEventResponse()
Resume regular communication
_Figure 60. Sequence Diagram: Connection Loss During Transaction_
**7 Error handling** n/a
**8 Remark(s)** n/a
**E11 - Connection Loss During Transaction - Requirements**
_Table 117. E11 - Requirements_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition
E11.FR.01 When Offline The Charging Station MUST queue all TransactionEventRequest
messages, that it would have sent to the CSMS if the Charging
Station had been online.
E11.FR.02 After the connection is restored. The Charging Station MUST send queued
TransactionEventRequest messages with the flag offline set to
TRUE.
E11.FR.03 When configured to send meter data in the
TransactionEventRequest(eventType =
Updated), See: Meter Values - Configuration


The Charging Station SHALL add the configured measurands to
the optional meterValue field in the TransactionEventRequest
(eventType  Updated) sent to the CSMS to provide more details
during the transaction.

E11.FR.04 (^) E11.FR.03
AND
_Offline_
AND
The Charging Station is running low on memory
The Charging Station MAY drop TransactionEventRequest
(eventType  Updated) messages.
E11.FR.05 E11.FR.04 When dropping TransactionEventRequest(eventType  Updated)
messages, the Charging Station SHALL drop intermediate
messages first (1st message, 3th message, 5th message etc.),
not start dropping messages from the start or stop adding
messages to the queue.
E11.FR.06 (^) E11.FR.03
AND
Amount of meter data is too much for 1
TransactionEventRequest(eventType  Updated)
The Charging Station MAY split the meter data over multiple
TransactionEventRequest(eventType  Updated) messages with
the same _timestamp_.
E11.FR.07 If the Charging Station goes offline, every message that is still in
the queue SHALL be set _Offline_.
E11.FR.08 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter values and
put them in the _signedMeterValue_ field of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E12 - Inform CSMS of an Offline Occurred Transaction.

_Table 118. E12 - Inform CSMS of an Offline Occurred Transaction_


No. Type Description
1 Name Inform CSMS of an Offline Occurred Transaction
2 ID E12
Functional block E. Transactions
3 Objective(s) To enable the Charging Station to inform the CSMS that a transaction occurred while the
Charging Station was Offline.
4 Description This use case covers how the Charging Station starts and stops a transaction since connection
loss.
Actors Charging Station, CSMS

_Scenario description_ (^) **1.** The connection with the CSMS is restored.

**2.** The Charging Station sends a Heartbeat message to the CSMS.
**3.** The Charging Station sends TransactionEventRequest (eventType  Started, offline  TRUE) to
the CSMS.
**4.** The CSMS responds with TransactionEventResponse, accepting the transaction.
**5.** The Charging Station sends TransactionEventRequest (eventType  Updated, offline  TRUE)
**6.** The CSMS responds with TransactionEventResponse.
**7.** The Charging Station sends TransactionEventRequest (eventType  Ended, offline  TRUE)
**8.** The CSMS responds with TransactionEventResponse.
**5 Prerequisite(s)** At least one _Offline_ transaction has taken place.

**6 Postcondition(s)** (^) **Successful postcondition:**
The CSMS has processed all transactions that occurred _Offline_.
**Failure postcondition:**
n/a
Charging Station CSMS
Charging Station is Offline and a transaction has occurred.
Connection restored.
HeartbeatRequest()
HeartbeatResponse()
send queued message()
loop [for all queued TransactionEvent messages since connection loss]
TransactionEventRequest(transactionId  X, offline  true)
TransactionEventResponse()
_Figure 61. Sequence Diagram: Inform CSMS of an Offline Occurred Transaction_
**7 Error handling** n/a
**8 Remark(s)** n/a
**E12 - Inform CSMS of an Offline Occurred Transaction - Requirements**
_Table 119. E12 - Requirements_
**ID Precondition Requirement definition**
E12.FR.01 When _Offline_ The Charging Station MUST queue all TransactionEventRequest
messages, that it would have sent to the CSMS if the Charging
Station had been online.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition
E12.FR.02 After the connection is restored. The Charging Station MUST send queued
TransactionEventRequest messages with the flag offline set to
TRUE.
E12.FR.03 When configured to send meter data in the
TransactionEventRequest(eventType =
Updated), See: Meter Values - Configuration


The Charging Station SHALL add the configured measurands to
the optional meterValue field in the TransactionEventRequest
(eventType  Updated) sent to the CSMS to provide more details
during the transaction.

E12.FR.04 (^) E12.FR.03
AND
_Offline_
AND
The Charging Station is running low on memory
The Charging Station MAY drop TransactionEventRequest
(eventType  Updated) messages.
E12.FR.05 E12.FR.04 When dropping TransactionEventRequest(eventType  Updated)
messages, the Charging Station SHALL drop intermediate
messages first (1st message, 3th message, 5th message etc.),
not start dropping messages from the start or stop adding
messages to the queue.
E12.FR.06 (^) E12.FR.03
AND
Amount of meter data is too much for 1
TransactionEventRequest(eventType  Updated)
The Charging Station MAY split the meter data over multiple
TransactionEventRequest(eventType  Updated) messages with
the same _timestamp_.
E12.FR.07 When configured to send meter data in the
TransactionEventRequest(eventType  Ended),
See: Meter Values - Configuration
The Charging Station SHALL add the configured measurands to
the optional meterValue field in the TransactionEventRequest
(eventType  Ended) sent to the CSMS to provide more details
about transaction usage.
E12.FR.08 (^) E12.FR.07
AND
The Charging Station is running low on memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended) message.
E12.FR.09 E12.FR.08 When dropping meter data, the Charging Station SHALL drop
intermediate values first (1st value, 3th value, 5th etc), not start
dropping values from the start of the list or stop adding values to
the list.
E12.FR.10 SampledDataSignReadings is _true_ The Charging Station SHALL retrieve signed meter values and
put them in the _signedMeterValue_ field of sampledValues.
Edition 3 FINAL, 2024-05-06 **E. Transactions**

[[e13_transaction_related_message_not_accepted_by_csms]]
==== E13 - Transaction-related message not accepted by CSMS

_Table 120. E13 - Transaction-related message not accepted by CSMS_


No. Type Description
1 Name Transaction-related message not accepted by CSMS
2 ID E13
Functional block E. Transactions
3 Objective(s) To define how a Charging Station shall handle not accepted messages.
4 Description There are a situation/issues why a CSMS might not accept a transaction related message, or
does not reply within the MessageTimeout. Most are error scenarios. When something like this
happens, the Charging Station SHALL retry the messages a couple of times.
Actors Charging Station, CSMS

_Scenario description_ (^) **1.** The Charging Station sends a transaction-related message to the CSMS.

**2.** The message is not accepted and MessageAttemptsTransactionEvent not reached.
**3.** The Charging Station waits the number of preceding transmissions of this same message
times MessageAttemptIntervalTransactionEvent seconds.
**4.** The Charging Station resends the transaction-related message to the CSMS.
**5 Prerequisite(s)** n/a

**6 Postcondition(s)** (^) **Successful postcondition:**
MessageAttemptsTransactionEvent is _not_ reached AND the transaction-related message is
accepted. MessageAttemptsTransactionEvent is reached AND the transaction-related message is
disposed.
**Failure postcondition:**
MessageAttemptsTransactionEvent is _not_ reached AND the transaction-related message is
disposed. MessageAttemptsTransactionEvent is reached AND the transaction-related message is
accepted.
Charging Station CSMS
transaction related message request()
loop [while number of messages sent has not reached MessageAttemptsTransactionEvent]
alt [if message delivered successfully]
transaction related message response()
Continue processing next message()
[if message not accepted]
failure to process the message()
wait number of attempts x
MessageAttemptIntervalTransactionEvent seconds
resend message()
dispose message()
_Figure 62. Sequence Diagram: Transaction-related message not accepted by CSMS_
**7 Error handling** n/a
**8 Remark(s)** This use case describes the expect behaviour when the CSMS does not accept a message, or
does not reply within the message timeout, this is different from a situation where the
communication between Charging Station and CSMS is _Offline_.
**E13 - Transaction-related message not accepted by CSMS - Requirements**
_Table 121. E13 - Requirements_
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirement definition
E13.FR.01 The number of times and the interval with which the Charging
Station should retry such failed transaction-related messages
MAY be configured using the
MessageAttemptsTransactionEvent and
MessageAttemptIntervalTransactionEvent
Configuration Variables.
E13.FR.02 When the Charging Station encounters a first
failure to deliver a certain transaction-related
message.


The Charging Station SHALL send this message again as long as
it keeps resulting in a failure to process this message and it has
not yet encountered as many failures to process this message
for this message as specified in its
MessageAttemptsTransactionEvent Configuration
Variable.
E13.FR.03 The CSMS does not accept a transaction-related
message.


The Charging Station SHALL wait as many seconds as specified
in its MessageAttemptIntervalTransactionEvent key,
multiplied by the number of preceding transmissions of this
same message.
E13.FR.04 If the final attempt fails. The Charging Station SHALL discard the message and continue
with the next transaction-related message, if there is any.

**E13 - Transaction-related message not accepted by CSMS - Example**

As an example, consider a Charging Station that has the value "3" for the MessageAttemptsTransactionEvent Configuration
Variable and the value "60" for the MessageAttemptIntervalTransactionEvent Configuration Variable. It sends a
TransactionEventRequest message and detects a failure to process the message in the CSMS. The Charging Station SHALL wait
for 60 seconds, and resend the message. In the case when there is a second failure, the Charging Station SHALL wait for 120
seconds, before resending the message. If this final attempt fails, the Charging Station SHALL discard the message and continue
with the next transaction-related message, if there is any.

Edition 3 FINAL, 2024-05-06 **E. Transactions**


==== E14 - Check transaction status


No. Type Description
1 Name Check transaction status
2 ID E14
Functional block E. Transactions
3 Objectives To enable the CSMS to request the status of a transaction and to find out whether there are
queued transaction-related messages.
4 Description There are scenarios where a CSMS needs to know whether there are still messages for a
transaction that need to be delivered. For example: A CSMS receives a TransactionEventRequest
(eventType  Ended), it wants to start the billing process for this transaction but detects it is still
missing some intermediate messages (it can check this via the sequence number in the
messages). It can ask if the Charging Station has still messages in the queue for this transaction
with the GetTransactionStatusRequest specifying the transactionId. Depending on the result the
CSMS might for example: wait for the messages to be delivered, or start the billing process
without the information. It may also need to know whether a transaction is still ongoing.
If the CSMS wants to know if there are transaction-related messages in the queue at all (not just
for a specific transaction), it can send a GetTransactionStatusRequest without a transactionId.
Actors CSMS, Charging Station
Scenario description 1. The CSMS sends a GetTransactionStatusRequest with or without a transactionId to the
Charging Station.

**2.** The Charging Station responds with a GetTransactionStatusResponse.
**5 Prerequisites** The CSMS knows the transactionId of a transaction it wants to know the status of.

**6 Postcondition(s)** (^) **Successful postcondition:**
The CSMS knows the status of the requested transaction.
**Failure postcondition:**
The CSMS does not know the status of the requested transaction.
CSMS Charging Station
alt [For a specific transaction]
GetTransactionStatusRequest(transactionId)
GetTransactionStatusResponse(ongoing, messagesInQueue)
[Not for a specific transaction]
GetTransactionStatusRequest()
GetTransactionStatusResponse(messagesInQueue)
_Figure 63. Sequence Diagram: Check transaction status_
**7 Error Handling** n/a
**8 Remarks** When the CSMS receives a GetTransactionStatusResponse with both fields ( _ongoingIndicator_ and
_messagesInQueue_ ) set to false, this might mean that the transaction is finished and there are no
more messages in the queue for this transaction, or the Charging Station doesnâ€™t know anything
about this transaction (anymore).
**E14 - Check transaction status - Requirements
ID Precondition Requirements**
E14.FR.01 The Charging Station receives a
GetTransactionStatusRequest with a
transactionId AND
It did not do a transaction with that
transactionId
The Charging Station SHALL respond with _ongoingIndicator_ =
false AND _messagesInQueue_  false.
E14.FR.02 The Charging Station receives a
GetTransactionStatusRequest with a
transactionId AND
The transaction with that transactionId has not
stopped yet
The Charging Stationâ€™s response SHALL have _ongoingIndicator_ =
true.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



ID Precondition Requirements
E14.FR.03 The Charging Station receives a
GetTransactionStatusRequest with a
transactionId AND
The transaction with that transactionId has
stopped


The Charging Stationâ€™s response SHALL have ongoingIndicator =
false.


E14.FR.04 The Charging Station receives a
GetTransactionStatusRequest with a
transactionId AND
It has transaction-related messages to be
delivered about the transaction with that
transactionId


The Charging Stationâ€™s response SHALL have messagesInQueue
 true.


E14.FR.05 The Charging Station receives a
GetTransactionStatusRequest with a
transactionId AND
It has no transaction-related messages to be
delivered about the transaction with that
transactionId


The Charging Stationâ€™s response SHALL have messagesInQueue
 false.


E14.FR.06 The Charging Station receives a
GetTransactionStatusRequest without a
transactionId


The Charging Stationâ€™s response SHALL NOT have
ongoingIndicator set.


E14.FR.07 The Charging Station receives a
GetTransactionStatusRequest without a
transactionId AND
It has transaction-related messages to be
delivered


The Charging Stationâ€™s response SHALL have messagesInQueue
 true.


E14.FR.08 The Charging Station receives a
GetTransactionStatusRequest without a
transactionId AND
It has no transaction-related messages to be
delivered


The Charging Stationâ€™s response SHALL have messagesInQueue
 false.

==== 2.2. Interrupting and Stopping ISO 15118 Charging

==== E15 - End of charging process.

_Table 122. E15 - End of charging process_


No. Type Description
1 Name End of charging process.
2 ID E15
Functional block E. Transactions
Reference ISO15118-1 H1 - End of charging process

**3 Objectives** (^) See ISO15118-1, use case Objective H1, page 44.
**4 Description** (^) See ISO15118-1, use case Description H1, page 44.
**5 Actors** EV, EVSE, EV Driver
**6 Scenario Description** See ISO15118-1, use case Description H1, Basic elementary use case description, first 5 bullets
and last 2 remarks, page 44.

**6.** The EV driver unplugs the cable from the EV
**7.** The Charging Station sends a TransactionEventRequest with eventType eventType  Ended to
the CSMS.

**7 Prerequisites** (^) See ISO15118-1, use case Prerequisites H1, page 44.
**8 Postcondition(s)** (^) The CSMS has received all relevant information about the transaction.
See ISO15118-1, use case End Conditions H1, page 44.
Edition 3 FINAL, 2024-05-06 **E. Transactions**



EV Charging Station CSMS


15118
PowerDeliveryReq(ChargeProgress=Stop)
open contactor


PowerDeliveryRes()
SessionStopReq()
SessionStopRes()


OCPP
TransactionEventRequest(eventType  Ended)
TransactionEventResponse()

_Figure 64. End of charging process_


9 Error handling n/a

**10 Remark(s)** (^) See ISO15118-1, use case Requirements H1, page 44 for the trigger.
The scenario description and sequence diagram above are based on the Configuration Variable
for stop transaction being configured as follows.
TxStopPoint: ParkingBayOccupancy, EVConnected, Authorized, DataSigned, PowerPathClosed
This use-case is also valid for other configurations, but then the transaction might stop at another
moment, which might change the sequence in which message are sent. For more details see the
use case: E06 - Stop Transaction options
Source: ISO15118-1
**E15 - End of charging process - Requirements**
_Table 123. E15 - Requirements_
**ID Precondition Requirement definition**
E15.FR.01 When configured to send meter data in the
TransactionEventRequest (eventType  Ended),
See: Meter Values - Configuration
The Charging Station SHALL add the configured measurands to
the optional meterValue field in the TransactionEventRequest
(eventType  Ended) sent to the CSMS to provide more details
about transaction usage.
E15.FR.02 (^) E15.FR.01
AND
The Charging Station is running low on memory
The Charging Station MAY drop meter data in the
TransactionEventRequest(eventType  Ended) message.
E15.FR.03 E15.FR.02 When dropping meter data, the Charging Station SHALL drop
intermediate values first (1st value, 3th value, 5th etc), not start
dropping values from the start of the list or stop adding values to
the list.
E15.FR.04 When TxStopPoint contains "Authorized" or
"PowerPathClosed" or "EnergyTransfer" AND
Charging Station has not yet sent a
TransactionEventRequest with _triggerReason_ =
StopAuthorized when it receives a ISO 15118
SessionStopReq(Terminate) message from the
EV
Charging Station SHALL send a TransactionEventRequest
message with eventType  Ended and _triggerReason_ =
StopAuthorized and _stoppedReason_  StoppedByEV to
inform the CSMS that the charging transaction has been stopped
(by the EV).
E15.FR.05 When TxStopPoint does not contain
"Authorized" or "PowerPathClosed" or
"EnergyTransfer" AND
Charging Station has not yet sent a
TransactionEventRequest with _triggerReason_ =
StopAuthorized when it receives a ISO 15118
SessionStopReq(Terminate) message from the
EV
Charging Station SHALL send a TransactionEventRequest
message with eventType  Updated and _triggerReason_ =
StopAuthorized to inform the CSMS that the authorization
has ended.
